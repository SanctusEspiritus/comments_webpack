/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./script.js":
/*!*******************!*\
  !*** ./script.js ***!
  \*******************/
/***/ (() => {

eval("/* Common functions */\r\nclass Paginator {\r\n  constructor(current, all, parentElement) {\r\n    this.current = current;\r\n    this.all = all;\r\n    this.parentElement = parentElement;\r\n  }\r\n\r\n  render() {\r\n    if (this.all === 1) {\r\n      return;\r\n    }\r\n    const links = [1, this.all];\r\n    for (let i = this.current - 2; i <= this.current + 2; i++) {\r\n      if (i < 1 || i > this.all || links.length > 7) {\r\n        continue;\r\n      }\r\n      links.push(i);\r\n    }\r\n    const uniqLinks = [...new Set(links)];\r\n    uniqLinks.sort((a, b) => a - b);\r\n\r\n    for (let i = 0; i < uniqLinks.length; i++) {\r\n      this._renderLink(uniqLinks[i]);\r\n      if (i + 1 < uniqLinks.length && uniqLinks[i] + 1 !== uniqLinks[i + 1]) {\r\n        this.__renderDots();\r\n      }\r\n    }\r\n  }\r\n\r\n  _renderLink(pageNum) {\r\n    const span = document.createElement(\"span\");\r\n    span.innerHTML = pageNum;\r\n    span.className = \"pagination_num\";\r\n    span.onclick = setCurrentPage;\r\n\r\n    if (pageNum == this.current) {\r\n      span.classList.add(\"current\");\r\n    }\r\n\r\n    this.parentElement.appendChild(span);\r\n  }\r\n\r\n  __renderDots() {\r\n    const span = document.createElement(\"span\");\r\n    span.innerHTML = \"...\";\r\n    this.parentElement.appendChild(span);\r\n  }\r\n}\r\n\r\nconst setCurrentPage = (e) => {\r\n  currentPage = Number(e.target.innerHTML);\r\n  getComments(\"goToNewCurrentPage\");\r\n};\r\n\r\nconst redrawingPagination = () => {\r\n  elPagination.innerHTML = \"\";\r\n  paginator.current = currentPage;\r\n  paginator.all = maxPage;\r\n  paginator.render();\r\n};\r\n\r\nconst showMoreComments = () => {\r\n  currentPage += 1;\r\n  getComments(\"getNextComments\");\r\n};\r\n\r\nconst createPaginator = () => {\r\n  paginator = new Paginator(currentPage, maxPage, elPagination);\r\n};\r\n\r\nconst updateArrayList = (objPage) => {\r\n  objPage.data.forEach((element) => {\r\n    arrayListComments.push(element);\r\n  });\r\n};\r\n\r\nconst сreateForm = () => {\r\n  const formParent = document.createElement(\"form\");\r\n  const h1Form = document.createElement(\"h1\");\r\n  const formInputName = document.createElement(\"input\");\r\n  const formInputText = document.createElement(\"textarea\");\r\n  const blockButton = document.createElement(\"div\");\r\n  const buttonForm = document.createElement(\"input\");\r\n\r\n  buttonForm.type = \"submit\";\r\n  buttonForm.value = \"post\";\r\n  formParent.method = \"post\";\r\n  formParent.onsubmit = sendComment;\r\n\r\n  h1Form.innerHTML = \"Comments\";\r\n\r\n  formInputName.type = \"text\";\r\n  formInputName.id = \"name\";\r\n  formInputName.min = \"1\";\r\n  formInputName.placeholder = \"Name\";\r\n  formInputName.required = true;\r\n\r\n  formInputText.type = \"text\";\r\n  formInputText.id = \"text\";\r\n  formInputText.min = \"1\";\r\n  formInputText.placeholder = \"Text\";\r\n  formInputText.required = true;\r\n  \r\n  formParent.appendChild(h1Form);\r\n  formParent.appendChild(formInputName);\r\n  formParent.appendChild(formInputText);\r\n  blockButton.appendChild(buttonForm);\r\n  formParent.appendChild(blockButton);\r\n\r\n  elForm.appendChild(formParent);\r\n};\r\n\r\nconst sendComment = (e) => {\r\n  e.preventDefault();\r\n  postComments({\r\n    name: document.getElementById(\"name\").value,\r\n    text: document.getElementById(\"text\").value,\r\n  });\r\n  document.getElementById(\"name\").value = \"\";\r\n  document.getElementById(\"text\").value = \"\";\r\n};\r\n\r\nfunction mydiff(interval,timediff) {\r\n  const second=1000, minute=second*60, hour=minute*60, day=hour*24, week=day*7;\r\n  if (isNaN(timediff)) return NaN;\r\n  switch (interval) {\r\n      case \"days\"   : return Math.floor(timediff / day); \r\n      case \"hours\"  : return Math.floor(timediff / hour); \r\n      default: return undefined;\r\n  }\r\n}\r\n\r\n/* Query code */\r\nconst elRoot = document.getElementById(\"root\");\r\nconst elButton = document.getElementById(\"button\");\r\nconst elPagination = document.getElementById(\"pagination\");\r\nconst elForm = document.getElementById(\"form\");\r\n\r\nconst buttonShowMore = document.createElement(\"button\");\r\nbuttonShowMore.innerHTML = \"Show more\";\r\nbuttonShowMore.onclick = showMoreComments;\r\nelButton.appendChild(buttonShowMore);\r\n\r\nсreateForm();\r\n\r\nlet arrayListComments = [];\r\nlet maxPage = 0;\r\nlet currentPage = 1;\r\nlet paginator = \"\";\r\n\r\nconst redrawingComments = () => {\r\n  elRoot.innerHTML = \"\";\r\n  let presentData = new Date().toJSON();\r\n  let textDate = \"\";\r\n\r\n  presentData = Date.parse(presentData);\r\n  arrayListComments.forEach((el) => {\r\n    const dateParse = Date.parse(el.updated_at);\r\n\r\n    const blockComment = document.createElement(\"div\");\r\n    const blockAuthorAndDate = document.createElement(\"div\");\r\n    const authorComment = document.createElement(\"span\");\r\n    const textComment = document.createElement(\"span\");\r\n    const dateCreate = document.createElement(\"span\");\r\n\r\n    const raznica = presentData - dateParse;\r\n    let postDate = mydiff(\"days\", raznica);\r\n\r\n    blockComment.className = \"comment\";\r\n    authorComment.className = \"comment_author\";\r\n    textComment.className = \"comment_text\";\r\n    blockAuthorAndDate.className = \"comment_date_autor\";\r\n\r\n    if (postDate === 0) {\r\n      postDate = mydiff(\"hours\", raznica);\r\n      textDate = `${postDate} hours ago`;\r\n    } else {\r\n      textDate = `${postDate} days ago`;\r\n    }\r\n\r\n    dateCreate.innerHTML = textDate;\r\n    authorComment.innerHTML = el.name;\r\n    textComment.innerHTML = el.text;\r\n\r\n    blockAuthorAndDate.appendChild(authorComment);\r\n    blockAuthorAndDate.appendChild(dateCreate);\r\n    blockComment.appendChild(blockAuthorAndDate);\r\n    blockComment.appendChild(textComment);\r\n\r\n    elRoot.appendChild(blockComment);\r\n  });\r\n};\r\n\r\ngetComments(\"\", true);\r\n\r\n/* DAL */\r\nasync function postComments(objValues) {\r\n  const response = await fetch(\r\n    `https://jordan.ashton.fashion/api/goods/30/comments`,\r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(objValues),\r\n    }\r\n  );\r\n\r\n  if (response.status === 200) {\r\n    createPaginator();\r\n    redrawingPagination();\r\n    if (currentPage === maxPage) {\r\n      getComments(\"goToNewCurrentPage\");\r\n      redrawingComments();\r\n    }\r\n  }\r\n}\r\n\r\nasync function getComments(func = \"\", needCreatePaginator = false) {\r\n  fetch(\r\n    `https://jordan.ashton.fashion/api/goods/30/comments?page=${currentPage}`,\r\n    {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }\r\n  )\r\n    .then((response) => response.json())\r\n    .then((objPage) => {\r\n      maxPage = objPage.last_page;\r\n      if (needCreatePaginator) {\r\n        createPaginator();\r\n      }\r\n      if (func && func === \"getNextComments\") {\r\n        updateArrayList(objPage);\r\n      } else if (func && func === \"goToNewCurrentPage\") {\r\n        arrayListComments = [];\r\n        updateArrayList(objPage);\r\n      } else if (!func) {\r\n        updateArrayList(objPage);\r\n      }\r\n      redrawingPagination();\r\n      redrawingComments();\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error:\", error);\r\n    });\r\n  currentPage === maxPage\r\n    ? (elButton.style.display = \"none\")\r\n    : (elButton.style.display = \"block\");\r\n}\r\n\n\n//# sourceURL=webpack:///./script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./script.js"]();
/******/ 	
/******/ })()
;